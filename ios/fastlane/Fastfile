# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
update_fastlane

default_platform(:ios)

platform :ios do
  
  lane :certificates do 
    match(type: "development")
    match(type: "appstore")
  end

  desc "Submit new Beta build to Testflight"
  lane :beta do

    increment_build_number(build_number: number_of_commits)
    changelog = changelog_from_git_commits(commits_count: 1)

    match(type: "appstore")
    get_push_certificate
    gym(workspace: "Moonlet.xcworkspace", scheme: "Moonlet_beta", export_method: "app-store")
    
    pilot(
      changelog: changelog,
      beta_app_description: "Moonlet Beta App " + get_version_number(target:"Moonlet_beta"),
      beta_app_feedback_email: "tibi@moonlet.xyz",
      skip_waiting_for_build_processing: true,
      distribute_external: false
    )

  end

 desc "Deploy new  build to AppStore"
  lane :deploy do

    ensure_git_branch(
      branch: 'master'
    )

    # this does not really work because the pod install command changes stuff, so it will fail
    #ensure_git_status_clean

    version_name = get_version_number(target: "Moonlet")
    appstore_build = app_store_build_number(live: false, app_identifier: "com.moonlet", version: version_name.to_s, initial_build_number: "1")

    # tag the current commit. it will fail if there are duplicates, 
    # thus making sure we don't release the same version twice
    current_commit = ENV['CIRCLE_SHA1']
    version_tag = "ios/v#{version_name}"
    add_git_tag(
      tag: version_tag,
      commit: current_commit
    )


    # read the details from the changelog
    changelog = read_changelog(
      changelog_path: '../CHANGELOG.md',	# Specify path to CHANGELOG.md
      section_identifier: "[Unreleased]",	  # Specify what section to read
      excluded_markdown_elements: ['###']	# Specify which markdown elements should be excluded
    )
    
    changelogWithMarkdown = read_changelog(
      changelog_path: '../CHANGELOG.md',	# Specify path to CHANGELOG.md
      section_identifier: "[Unreleased]",	  # Specify what section to read
    )


    increment_build_number(build_number: appstore_build)

    match(type: "appstore")
    get_push_certificate(app_identifier: "live.soundmix")
    gym(workspace: "soundmix.xcworkspace", scheme: "soundmix", export_method: "app-store")
    
    File.write("metadata/en-US/release_notes.txt", changelog)

    upload_to_app_store(force: true, app_identifier: "live.soundmix", submit_for_review: true, phased_release: false, automatic_release: true)
   
    # also create a github release so it's easier to track changes
    set_github_release(
      repository_name: 'soundmix-live/mobile-app',
      api_token: ENV['GITHUB_TOKEN'],
      tag_name: version_tag,
      name: 'ios/v' + version_name,
      description: changelogWithMarkdown
    )

    url = ENV["SOUNDMIX_API_HOST"] + "/versions?apikey=" + ENV["SOUNDMIX_API_KEY"]
    json = {
      "platform" =>"ios",
      "platformVersion" => deployment_target,
      "appVersion" => get_version_number(target:"soundmix"),
      "url" => "https://itunes.apple.com/us/app/soundmix/id1439041185",
      "notes" => changelog,
      "versionStatus" => "pending"
    }.to_json()
    sh("curl", "-X", "POST", url , "-H" , "accept:application/ld+json", "-H", "Content-Type:application/json", "-d", json);



  end
  
end
